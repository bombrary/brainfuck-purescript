// Generated by purs bundle 0.14.2
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck.Env"] = $PS["Brainfuck.Env"] || {};
  var exports = $PS["Brainfuck.Env"];
  var makeEnv = function (program) {
      return {
          program: program
      };
  };
  var getProgram = function (v) {
      return v.program;
  };
  exports["getProgram"] = getProgram;
  exports["makeEnv"] = makeEnv;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  }; 
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];                
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["put"] = put;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];         
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };                                                         
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect_Class = $PS["Effect.Class"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($92) {
                      return $91(Data_Either.Left.create($92));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $93 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($94) {
              return ExceptT($93(Data_Either.Right.create($94)));
          };
      })());
  };
  var monadEffectExceptT = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadExceptT(dictMonadEffect.Monad0());
      }, (function () {
          var $95 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0());
          var $96 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($97) {
              return $95($96($97));
          };
      })());
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $103 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($104) {
              return ExceptT($103(Data_Either.Left.create($104)));
          };
      })());
  };
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadEffectExceptT"] = monadEffectExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];       
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
  exports["MonadAsk"] = MonadAsk;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect_Class = $PS["Effect.Class"];                
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  }; 
  var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($64) {
          return ReaderT(Data_Function["const"]($64));
      };
  });
  var mapReaderT = function (f) {
      return function (v) {
          return function ($65) {
              return f(v($65));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor((function () {
          var $66 = Data_Functor.map(dictFunctor);
          return function ($67) {
              return mapReaderT($66($67));
          };
      })());
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyReaderT(dictApplicative.Apply0());
      }, (function () {
          var $71 = Control_Applicative.pure(dictApplicative);
          return function ($72) {
              return ReaderT(Data_Function["const"]($71($72)));
          };
      })());
  };
  var monadReaderT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeReaderT(dictMonad.Applicative0());
      }, function () {
          return bindReaderT(dictMonad.Bind1());
      });
  };
  var monadAskReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadReaderT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0()));
  };
  var monadEffectReader = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadReaderT(dictMonadEffect.Monad0());
      }, (function () {
          var $74 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
          var $75 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($76) {
              return $74($75($76));
          };
      })());
  };
  var monadStateReaderT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadReaderT(dictMonadState.Monad0());
      }, (function () {
          var $77 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadState.Monad0());
          var $78 = Control_Monad_State_Class.state(dictMonadState);
          return function ($79) {
              return $77($78($79));
          };
      })());
  };
  var monadThrowReaderT = function (dictMonadThrow) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadReaderT(dictMonadThrow.Monad0());
      }, (function () {
          var $83 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadThrow.Monad0());
          var $84 = Control_Monad_Error_Class.throwError(dictMonadThrow);
          return function ($85) {
              return $83($84($85));
          };
      })());
  };
  exports["runReaderT"] = runReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadEffectReader"] = monadEffectReader;
  exports["monadThrowReaderT"] = monadThrowReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
  exports["monadStateReaderT"] = monadStateReaderT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Class = $PS["Effect.Class"];                
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  }; 
  var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (x) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(x, s));
              });
          };
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadEffectState = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadStateT(dictMonadEffect.Monad0());
      }, (function () {
          var $110 = Control_Monad_Trans_Class.lift(monadTransStateT)(dictMonadEffect.Monad0());
          var $111 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($112) {
              return $110($111($112));
          };
      })());
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $113 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($114) {
                  return $113(f($114));
              };
          })());
      });
  };
  exports["runStateT"] = runStateT;
  exports["functorStateT"] = functorStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["monadEffectState"] = monadEffectState;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* eslint-disable no-unused-vars, no-prototype-builtins, no-use-before-define, no-unused-labels, no-param-reassign */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                          
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 404, column 21 - line 406, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 399, column 20 - line 401, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 394, column 12 - line 396, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };
  var launchAff_ = (function () {
      var $40 = Data_Functor["void"](Effect.functorEffect);
      return function ($41) {
          return $40(launchAff($41));
      };
  })();                              
  var delay = function (v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
  };
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff_"] = launchAff_;
  exports["delay"] = delay;
  exports["nonCanceler"] = nonCanceler;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Effect.Aff.Class"] = $PS["Effect.Aff.Class"] || {};
  var exports = $PS["Effect.Aff.Class"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var MonadAff = function (MonadEffect0, liftAff) {
      this.MonadEffect0 = MonadEffect0;
      this.liftAff = liftAff;
  };
  var monadAffAff = new MonadAff(function () {
      return Effect_Aff.monadEffectAff;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  var monadAffExceptT = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Except_Trans.monadEffectExceptT(dictMonadAff.MonadEffect0());
      }, (function () {
          var $13 = Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)((dictMonadAff.MonadEffect0()).Monad0());
          var $14 = liftAff(dictMonadAff);
          return function ($15) {
              return $13($14($15));
          };
      })());
  };
  var monadAffReader = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_Reader_Trans.monadEffectReader(dictMonadAff.MonadEffect0());
      }, (function () {
          var $25 = Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)((dictMonadAff.MonadEffect0()).Monad0());
          var $26 = liftAff(dictMonadAff);
          return function ($27) {
              return $25($26($27));
          };
      })());
  };
  var monadAffState = function (dictMonadAff) {
      return new MonadAff(function () {
          return Control_Monad_State_Trans.monadEffectState(dictMonadAff.MonadEffect0());
      }, (function () {
          var $28 = Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)((dictMonadAff.MonadEffect0()).Monad0());
          var $29 = liftAff(dictMonadAff);
          return function ($30) {
              return $28($29($30));
          };
      })());
  };
  exports["liftAff"] = liftAff;
  exports["monadAffAff"] = monadAffAff;
  exports["monadAffExceptT"] = monadAffExceptT;
  exports["monadAffReader"] = monadAffReader;
  exports["monadAffState"] = monadAffState;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck.Interp"] = $PS["Brainfuck.Interp"] || {};
  var exports = $PS["Brainfuck.Interp"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var runInterp = function (dictMonad) {
      return function (v) {
          return function (env) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Control_Monad_Reader_Trans.runReaderT(v)(env)))(s))(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())({
                          result: v1.value0,
                          state: v1.value1
                      });
                  });
              };
          };
      };
  };
  var $dollar_MonadThrowErrorInterp_9 = function (dictMonad) {
      return Control_Monad_Reader_Trans.monadThrowReaderT(Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad)));
  };
  var $dollar_MonadStateStateInterp_7 = function (dictMonad) {
      return Control_Monad_Reader_Trans.monadStateReaderT(Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad)));
  };
  var $dollar_MonadEffectInterp_10 = function (dictMonadEffect) {
      return Control_Monad_Reader_Trans.monadEffectReader(Control_Monad_Except_Trans.monadEffectExceptT(Control_Monad_State_Trans.monadEffectState(dictMonadEffect)));
  };
  var $dollar_MonadAskEnvInterp_8 = function (dictMonad) {
      return Control_Monad_Reader_Trans.monadAskReaderT(Control_Monad_Except_Trans.monadExceptT(Control_Monad_State_Trans.monadStateT(dictMonad)));
  };
  var $dollar_MonadAffInterp_11 = function (dictMonadAff) {
      return Effect_Aff_Class.monadAffReader(Effect_Aff_Class.monadAffExceptT(Effect_Aff_Class.monadAffState(dictMonadAff)));
  };
  var $dollar_FunctorInterp_2 = function (dictFunctor) {
      return Control_Monad_Reader_Trans.functorReaderT(Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor)));
  };
  var $dollar_BindInterp_5 = function (dictMonad) {
      return Control_Monad_Reader_Trans.bindReaderT(Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad)));
  };
  var $dollar_ApplicativeInterp_4 = function (dictMonad) {
      return Control_Monad_Reader_Trans.applicativeReaderT(Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad)));
  };
  exports["runInterp"] = runInterp;
  exports["$_FunctorInterp_2"] = $dollar_FunctorInterp_2;
  exports["$_ApplicativeInterp_4"] = $dollar_ApplicativeInterp_4;
  exports["$_BindInterp_5"] = $dollar_BindInterp_5;
  exports["$_MonadStateStateInterp_7"] = $dollar_MonadStateStateInterp_7;
  exports["$_MonadAskEnvInterp_8"] = $dollar_MonadAskEnvInterp_8;
  exports["$_MonadThrowErrorInterp_9"] = $dollar_MonadThrowErrorInterp_9;
  exports["$_MonadEffectInterp_10"] = $dollar_MonadEffectInterp_10;
  exports["$_MonadAffInterp_11"] = $dollar_MonadAffInterp_11;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck.Command"] = $PS["Brainfuck.Command"] || {};
  var exports = $PS["Brainfuck.Command"];
  var Data_Show = $PS["Data.Show"];                
  var IncPtr = (function () {
      function IncPtr() {

      };
      IncPtr.value = new IncPtr();
      return IncPtr;
  })();
  var DecPtr = (function () {
      function DecPtr() {

      };
      DecPtr.value = new DecPtr();
      return DecPtr;
  })();
  var IncDat = (function () {
      function IncDat() {

      };
      IncDat.value = new IncDat();
      return IncDat;
  })();
  var DecDat = (function () {
      function DecDat() {

      };
      DecDat.value = new DecDat();
      return DecDat;
  })();
  var LBrace = (function () {
      function LBrace() {

      };
      LBrace.value = new LBrace();
      return LBrace;
  })();
  var RBrace = (function () {
      function RBrace() {

      };
      RBrace.value = new RBrace();
      return RBrace;
  })();
  var Output = (function () {
      function Output() {

      };
      Output.value = new Output();
      return Output;
  })();
  var Input = (function () {
      function Input() {

      };
      Input.value = new Input();
      return Input;
  })();
  var Nop = (function () {
      function Nop() {

      };
      Nop.value = new Nop();
      return Nop;
  })();
  var fromChar = function (v) {
      if (v === ">") {
          return IncPtr.value;
      };
      if (v === "<") {
          return DecPtr.value;
      };
      if (v === "+") {
          return IncDat.value;
      };
      if (v === "-") {
          return DecDat.value;
      };
      if (v === "[") {
          return LBrace.value;
      };
      if (v === "]") {
          return RBrace.value;
      };
      if (v === ".") {
          return Output.value;
      };
      if (v === ",") {
          return Input.value;
      };
      return Nop.value;
  };
  var $dollar_ShowCommand_2 = new Data_Show.Show(function (v) {
      if (v instanceof IncPtr) {
          return ">";
      };
      if (v instanceof DecPtr) {
          return "<";
      };
      if (v instanceof IncDat) {
          return "+";
      };
      if (v instanceof DecDat) {
          return "-";
      };
      if (v instanceof LBrace) {
          return "[";
      };
      if (v instanceof RBrace) {
          return "]";
      };
      if (v instanceof Output) {
          return ".";
      };
      if (v instanceof Input) {
          return ",";
      };
      if (v instanceof Nop) {
          return "nop";
      };
      throw new Error("Failed pattern match at Brainfuck.Command (line 19, column 5 - line 28, column 19): " + [ v.constructor.name ]);
  });
  exports["IncPtr"] = IncPtr;
  exports["DecPtr"] = DecPtr;
  exports["IncDat"] = IncDat;
  exports["DecDat"] = DecDat;
  exports["LBrace"] = LBrace;
  exports["RBrace"] = RBrace;
  exports["Output"] = Output;
  exports["Input"] = Input;
  exports["Nop"] = Nop;
  exports["fromChar"] = fromChar;
  exports["$_ShowCommand_2"] = $dollar_ShowCommand_2;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck.Interp.Stream"] = $PS["Brainfuck.Interp.Stream"] || {};
  var exports = $PS["Brainfuck.Interp.Stream"];
  var write = function (c) {
      return function (v) {
          return v.output(c);
      };
  };
  var read = function (v) {
      return v.input;
  };
  exports["read"] = read;
  exports["write"] = write;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck.Error"] = $PS["Brainfuck.Error"] || {};
  var exports = $PS["Brainfuck.Error"];            
  var IPtrOutOfRange = (function () {
      function IPtrOutOfRange() {

      };
      IPtrOutOfRange.value = new IPtrOutOfRange();
      return IPtrOutOfRange;
  })();
  var DPtrOutOfRange = (function () {
      function DPtrOutOfRange() {

      };
      DPtrOutOfRange.value = new DPtrOutOfRange();
      return DPtrOutOfRange;
  })();
  var CharDecodeFailed = (function () {
      function CharDecodeFailed() {

      };
      CharDecodeFailed.value = new CharDecodeFailed();
      return CharDecodeFailed;
  })();
  var CharInputFailed = (function () {
      function CharInputFailed() {

      };
      CharInputFailed.value = new CharInputFailed();
      return CharInputFailed;
  })();
  exports["IPtrOutOfRange"] = IPtrOutOfRange;
  exports["DPtrOutOfRange"] = DPtrOutOfRange;
  exports["CharDecodeFailed"] = CharDecodeFailed;
  exports["CharInputFailed"] = CharInputFailed;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldr = Data_Foldable.foldr(Data_Foldable.foldableArray);
  exports["fromFoldable"] = fromFoldable;
  exports["index"] = index;
  exports["modifyAt"] = modifyAt;
  exports["mapWithIndex"] = mapWithIndex;
  exports["replicate"] = $foreign.replicate;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var toChar = $foreign["_toChar"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["toChar"] = toChar;
  exports["singleton"] = $foreign.singleton;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["take"] = $foreign.take;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck.Program"] = $PS["Brainfuck.Program"] || {};
  var exports = $PS["Brainfuck.Program"];
  var Brainfuck_Command = $PS["Brainfuck.Command"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];                
  var Program = function (x) {
      return x;
  };
  var readAt = function (i) {
      return function (v) {
          return Data_Array.index(v)(i);
      };
  };
  var fromString = function (str) {
      return Program(Data_Functor.map(Data_Functor.functorArray)(Brainfuck_Command.fromChar)(Data_String_CodeUnits.toCharArray(str)));
  };
  exports["fromString"] = fromString;
  exports["readAt"] = readAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck.State"] = $PS["Brainfuck.State"] || {};
  var exports = $PS["Brainfuck.State"];
  var Brainfuck_Program = $PS["Brainfuck.Program"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var readData = function (v) {
      return Data_Array.index(v.memory)(v.dptr);
  };
  var readCommand = function (p) {
      return function (v) {
          return Brainfuck_Program.readAt(v.iptr)(p);
      };
  };
  var modifyInstPtr = function (f) {
      return function (v) {
          return {
              dptr: v.dptr,
              iptr: f(v.iptr),
              memory: v.memory
          };
      };
  };
  var modifyDataPtr = function (f) {
      return function (v) {
          return {
              dptr: f(v.dptr),
              iptr: v.iptr,
              memory: v.memory
          };
      };
  };
  var modifyData = function (f) {
      return function (v) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (newMem) {
              return {
                  dptr: v.dptr,
                  iptr: v.iptr,
                  memory: newMem
              };
          })(Data_Array.modifyAt(v.dptr)(f)(v.memory));
      };
  };
  var defaultState = {
      iptr: 0,
      dptr: 0,
      memory: Data_Array.replicate(10)(0)
  };
  exports["modifyDataPtr"] = modifyDataPtr;
  exports["readData"] = readData;
  exports["modifyData"] = modifyData;
  exports["modifyInstPtr"] = modifyInstPtr;
  exports["readCommand"] = readCommand;
  exports["defaultState"] = defaultState;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  };                                           
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  exports["ordInt"] = ordInt;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  }; 
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
  exports["fromCharCode"] = fromCharCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck.Interp.Util"] = $PS["Brainfuck.Interp.Util"] || {};
  var exports = $PS["Brainfuck.Interp.Util"];
  var Brainfuck_Env = $PS["Brainfuck.Env"];
  var Brainfuck_Error = $PS["Brainfuck.Error"];
  var Brainfuck_Interp = $PS["Brainfuck.Interp"];
  var Brainfuck_State = $PS["Brainfuck.State"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Char = $PS["Data.Char"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var readDataOrFail = function (dictMonad) {
      return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Control_Monad_State_Class.gets(Brainfuck_Interp["$_MonadStateStateInterp_7"](dictMonad))(Brainfuck_State.readData))(function (v) {
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Brainfuck_Interp["$_ApplicativeInterp_4"](dictMonad))(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Monad_Error_Class.throwError(Brainfuck_Interp["$_MonadThrowErrorInterp_9"](dictMonad))(Brainfuck_Error.DPtrOutOfRange.value);
          };
          throw new Error("Failed pattern match at Brainfuck.Interp.Util (line 31, column 5 - line 36, column 34): " + [ v.constructor.name ]);
      });
  };
  var readCommandOrFail = function (dictMonad) {
      return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Control_Monad_State_Class.get(Brainfuck_Interp["$_MonadStateStateInterp_7"](dictMonad)))(function (state) {
          return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Data_Functor.map(Brainfuck_Interp["$_FunctorInterp_2"](((dictMonad.Bind1()).Apply0()).Functor0()))(Brainfuck_Env.getProgram)(Control_Monad_Reader_Class.ask(Brainfuck_Interp["$_MonadAskEnvInterp_8"](dictMonad))))(function (program) {
              var v = Brainfuck_State.readCommand(program)(state);
              if (v instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Brainfuck_Interp["$_ApplicativeInterp_4"](dictMonad))(v.value0);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Monad_Error_Class.throwError(Brainfuck_Interp["$_MonadThrowErrorInterp_9"](dictMonad))(Brainfuck_Error.IPtrOutOfRange.value);
              };
              throw new Error("Failed pattern match at Brainfuck.Interp.Util (line 54, column 3 - line 59, column 32): " + [ v.constructor.name ]);
          });
      });
  };
  var readCharOrFail = function (dictMonad) {
      return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(readDataOrFail(dictMonad))(function (x) {
          var v = Data_Char.fromCharCode(x);
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Brainfuck_Interp["$_ApplicativeInterp_4"](dictMonad))(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Monad_Error_Class.throwError(Brainfuck_Interp["$_MonadThrowErrorInterp_9"](dictMonad))(Brainfuck_Error.CharDecodeFailed.value);
          };
          throw new Error("Failed pattern match at Brainfuck.Interp.Util (line 42, column 3 - line 47, column 34): " + [ v.constructor.name ]);
      });
  };
  var modifyDataOrFail = function (dictMonad) {
      return function (f) {
          return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Control_Monad_State_Class.get(Brainfuck_Interp["$_MonadStateStateInterp_7"](dictMonad)))(function (state) {
              var v = Brainfuck_State.modifyData(f)(state);
              if (v instanceof Data_Maybe.Just) {
                  return Control_Monad_State_Class.put(Brainfuck_Interp["$_MonadStateStateInterp_7"](dictMonad))(v.value0);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Monad_Error_Class.throwError(Brainfuck_Interp["$_MonadThrowErrorInterp_9"](dictMonad))(Brainfuck_Error.DPtrOutOfRange.value);
              };
              throw new Error("Failed pattern match at Brainfuck.Interp.Util (line 20, column 3 - line 25, column 32): " + [ v.constructor.name ]);
          });
      };
  };
  var incInstPtr = function (dictMonad) {
      return Control_Monad_State_Class.modify_(Brainfuck_Interp["$_MonadStateStateInterp_7"](dictMonad))(Brainfuck_State.modifyInstPtr(function (v) {
          return v + 1 | 0;
      }));
  };
  var decInstPtr = function (dictMonad) {
      return Control_Monad_State_Class.modify_(Brainfuck_Interp["$_MonadStateStateInterp_7"](dictMonad))(Brainfuck_State.modifyInstPtr(function (v) {
          return v - 1 | 0;
      }));
  };
  exports["modifyDataOrFail"] = modifyDataOrFail;
  exports["readDataOrFail"] = readDataOrFail;
  exports["readCharOrFail"] = readCharOrFail;
  exports["readCommandOrFail"] = readCommandOrFail;
  exports["incInstPtr"] = incInstPtr;
  exports["decInstPtr"] = decInstPtr;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck.Interp.Command"] = $PS["Brainfuck.Interp.Command"] || {};
  var exports = $PS["Brainfuck.Interp.Command"];
  var Brainfuck_Command = $PS["Brainfuck.Command"];
  var Brainfuck_Interp = $PS["Brainfuck.Interp"];
  var Brainfuck_Interp_Stream = $PS["Brainfuck.Interp.Stream"];
  var Brainfuck_Interp_Util = $PS["Brainfuck.Interp.Util"];
  var Brainfuck_State = $PS["Brainfuck.State"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Char = $PS["Data.Char"];
  var Data_Unit = $PS["Data.Unit"];                
  var incDataPtr = function (dictMonad) {
      return Control_Monad_State_Class.modify_(Brainfuck_Interp["$_MonadStateStateInterp_7"](dictMonad))(Brainfuck_State.modifyDataPtr(function (v) {
          return v + 1 | 0;
      }));
  };
  var incData = function (dictMonad) {
      return Brainfuck_Interp_Util.modifyDataOrFail(dictMonad)(function (v) {
          return v + 1 | 0;
      });
  };
  var goToMate = function (dictMonad) {
      return function (move) {
          var go = function (cnt) {
              return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Brainfuck_Interp_Util.readCommandOrFail(dictMonad))(function (cmd) {
                  var newCnt = (function () {
                      if (cmd instanceof Brainfuck_Command.LBrace) {
                          return cnt + 1 | 0;
                      };
                      if (cmd instanceof Brainfuck_Command.RBrace) {
                          return cnt - 1 | 0;
                      };
                      return cnt;
                  })();
                  var $15 = newCnt === 0;
                  if ($15) {
                      return Control_Applicative.pure(Brainfuck_Interp["$_ApplicativeInterp_4"](dictMonad))(Data_Unit.unit);
                  };
                  return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(move)(function () {
                      return go(newCnt);
                  });
              });
          };
          return go(0);
      };
  };
  var goToRBrace = function (dictMonad) {
      return goToMate(dictMonad)(Brainfuck_Interp_Util.incInstPtr(dictMonad));
  };
  var goToLBrace = function (dictMonad) {
      return goToMate(dictMonad)(Brainfuck_Interp_Util.decInstPtr(dictMonad));
  };
  var decDataPtr = function (dictMonad) {
      return Control_Monad_State_Class.modify_(Brainfuck_Interp["$_MonadStateStateInterp_7"](dictMonad))(Brainfuck_State.modifyDataPtr(function (v) {
          return v - 1 | 0;
      }));
  };
  var decData = function (dictMonad) {
      return Brainfuck_Interp_Util.modifyDataOrFail(dictMonad)(function (v) {
          return v - 1 | 0;
      });
  };
  var interpCommand = function (dictMonad) {
      return function (stream) {
          return function (v) {
              if (v instanceof Brainfuck_Command.IncPtr) {
                  return incDataPtr(dictMonad);
              };
              if (v instanceof Brainfuck_Command.DecPtr) {
                  return decDataPtr(dictMonad);
              };
              if (v instanceof Brainfuck_Command.IncDat) {
                  return incData(dictMonad);
              };
              if (v instanceof Brainfuck_Command.DecDat) {
                  return decData(dictMonad);
              };
              if (v instanceof Brainfuck_Command.LBrace) {
                  return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Brainfuck_Interp_Util.readDataOrFail(dictMonad))(function (x) {
                      return Control_Applicative.when(Brainfuck_Interp["$_ApplicativeInterp_4"](dictMonad))(x === 0)(goToRBrace(dictMonad));
                  });
              };
              if (v instanceof Brainfuck_Command.RBrace) {
                  return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Brainfuck_Interp_Util.readDataOrFail(dictMonad))(function (x) {
                      return Control_Applicative.when(Brainfuck_Interp["$_ApplicativeInterp_4"](dictMonad))(x !== 0)(goToLBrace(dictMonad));
                  });
              };
              if (v instanceof Brainfuck_Command.Output) {
                  return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Brainfuck_Interp_Util.readCharOrFail(dictMonad))(function (c) {
                      return Brainfuck_Interp_Stream.write(c)(stream);
                  });
              };
              if (v instanceof Brainfuck_Command.Input) {
                  return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Brainfuck_Interp_Stream.read(stream))(function (x) {
                      return Brainfuck_Interp_Util.modifyDataOrFail(dictMonad)(function (v1) {
                          return Data_Char.toCharCode(x);
                      });
                  });
              };
              if (v instanceof Brainfuck_Command.Nop) {
                  return Control_Applicative.pure(Brainfuck_Interp["$_ApplicativeInterp_4"](dictMonad))(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Brainfuck.Interp.Command (line 17, column 3 - line 49, column 17): " + [ v.constructor.name ]);
          };
      };
  };
  exports["interpCommand"] = interpCommand;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck.Interp.Log"] = $PS["Brainfuck.Interp.Log"] || {};
  var exports = $PS["Brainfuck.Interp.Log"];
  var logState = function (v) {
      return v.onState;
  };
  var logStart = function (v) {
      return v.onStart;
  };
  var logEnd = function (v) {
      return v.onEnd;
  };
  var logCmd = function (v) {
      return v.onCmd;
  };
  exports["logStart"] = logStart;
  exports["logState"] = logState;
  exports["logCmd"] = logCmd;
  exports["logEnd"] = logEnd;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck"] = $PS["Brainfuck"] || {};
  var exports = $PS["Brainfuck"];
  var Brainfuck_Env = $PS["Brainfuck.Env"];
  var Brainfuck_Interp = $PS["Brainfuck.Interp"];
  var Brainfuck_Interp_Command = $PS["Brainfuck.Interp.Command"];
  var Brainfuck_Interp_Log = $PS["Brainfuck.Interp.Log"];
  var Brainfuck_Interp_Util = $PS["Brainfuck.Interp.Util"];
  var Brainfuck_State = $PS["Brainfuck.State"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];                          
  var interpProgram = function (dictMonad) {
      return function (stream) {
          return function (log) {
              var loop = Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Data_Functor.map(Brainfuck_Interp["$_FunctorInterp_2"](((dictMonad.Bind1()).Apply0()).Functor0()))(Brainfuck_Env.getProgram)(Control_Monad_Reader_Class.ask(Brainfuck_Interp["$_MonadAskEnvInterp_8"](dictMonad))))(function (program) {
                  return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Control_Monad_State_Class.get(Brainfuck_Interp["$_MonadStateStateInterp_7"](dictMonad)))(function (state) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Brainfuck_Interp_Log.logState(log)(state))(function () {
                          var v = Brainfuck_State.readCommand(program)(state);
                          if (v instanceof Data_Maybe.Just) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Brainfuck_Interp_Log.logCmd(log)(v.value0))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Brainfuck_Interp_Command.interpCommand(dictMonad)(stream)(v.value0))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Brainfuck_Interp_Util.incInstPtr(dictMonad))(function () {
                                          return loop;
                                      });
                                  });
                              });
                          };
                          if (v instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Brainfuck_Interp["$_ApplicativeInterp_4"](dictMonad))(Data_Unit.unit);
                          };
                          throw new Error("Failed pattern match at Brainfuck (line 48, column 7 - line 57, column 20): " + [ v.constructor.name ]);
                      });
                  });
              });
              return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(Brainfuck_Interp_Log.logStart(log))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"](dictMonad))(loop)(function () {
                      return Brainfuck_Interp_Log.logEnd(log);
                  });
              });
          };
      };
  };
  var run = function (dictMonad) {
      return function (stream) {
          return function (log) {
              return function (program) {
                  return Brainfuck_Interp.runInterp(dictMonad)(interpProgram(dictMonad)(stream)(log))(Brainfuck_Env.makeEnv(program))(Brainfuck_State.defaultState);
              };
          };
      };
  };
  exports["run"] = run;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck.CUI.State"] = $PS["Brainfuck.CUI.State"] || {};
  var exports = $PS["Brainfuck.CUI.State"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Effect_Ref = $PS["Effect.Ref"];
  var modifyY = function (f) {
      return function (v) {
          return {
              output: v.output,
              y: f(v.y),
              outputLines: v.outputLines
          };
      };
  };
  var init = Effect_Ref["new"]({
      output: "",
      y: 0,
      outputLines: 0
  });
  var incOntputLines = function (v) {
      return {
          output: v.output,
          y: v.y,
          outputLines: v.outputLines + 1 | 0
      };
  };
  var getOutputLines = function (v) {
      return v.outputLines;
  };
  var getOutput = function (v) {
      return v.output;
  };
  var dist = function (y0) {
      return function (v) {
          return y0 - v.y | 0;
      };
  };
  var appendOutput = function (c) {
      return function (v) {
          return {
              output: v.output + Data_String_CodeUnits.singleton(c),
              y: v.y,
              outputLines: v.outputLines
          };
      };
  };
  exports["init"] = init;
  exports["getOutputLines"] = getOutputLines;
  exports["incOntputLines"] = incOntputLines;
  exports["getOutput"] = getOutput;
  exports["appendOutput"] = appendOutput;
  exports["modifyY"] = modifyY;
  exports["dist"] = dist;
})(PS);
(function(exports) {
  "use strict";

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];
  var Data_Show = $PS["Data.Show"];                
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [ v.constructor.name ]);
  });
  exports["UTF8"] = UTF8;
  exports["showEncoding"] = showEncoding;
})(PS);
(function(exports) {
  "use strict";

  exports.process = process;
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Node.Process"] = $PS["Node.Process"] || {};
  var exports = $PS["Node.Process"];
  var $foreign = $PS["Node.Process"];             
  var stdout = $foreign.process.stdout;         
  var stdin = $foreign.process.stdin;
  exports["stdin"] = stdin;
  exports["stdout"] = stdout;
})(PS);
(function(exports) {
  "use strict";

  // module Node.ReadLine

  exports.createInterfaceImpl = function (options) {
    return function () {
      var readline = require("readline");
      return readline.createInterface({
        input: options.input,
        output: options.output,
        completer:
          options.completer &&
          function (line) {
            var res = options.completer(line)();
            return [res.completions, res.matched];
          },
        terminal: options.terminal,
        historySize: options.historySize,
      });
    };
  };

  exports.close = function (readline) {
    return function () {
      readline.close();
    };
  };

  exports.question = function (text) {
    return function (callback) {
      return function (readline) {
        return function () {
          readline.question(text, function (result) {
            callback(result)();
          });
        };
      };
    };
  };
})(PS["Node.ReadLine"] = PS["Node.ReadLine"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  exports["unwrap"] = unwrap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Op"] = $PS["Data.Op"] || {};
  var exports = $PS["Data.Op"];                              
  var Op = function (x) {
      return x;
  };
  exports["Op"] = Op;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
  exports["unsafeToForeign"] = unsafeToForeign;
})(PS);
(function(exports) {
  "use strict";      

  exports.runST = function (f) {
    return f();
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  exports["functorST"] = functorST;
  exports["foreach"] = $foreign.foreach;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(function __do() {
              var s = Foreign_Object_ST["new"]();
              Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v.value0)(v.value1)(s));
              })();
              return s;
          });
      };
  };
  exports["fromFoldable"] = fromFoldable;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Data.Options"] = $PS["Data.Options"] || {};
  var exports = $PS["Data.Options"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Op = $PS["Data.Op"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign = $PS["Foreign"];
  var Foreign_Object = $PS["Foreign.Object"];
  var semigroupOptions = Data_Semigroup.semigroupArray;
  var options = function (v) {
      return Foreign.unsafeToForeign(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(v));
  };                                          
  var defaultToOptions = function (k) {
      return function (v) {
          return [ new Data_Tuple.Tuple(k, Foreign.unsafeToForeign(v)) ];
      };
  };
  var opt = function ($4) {
      return Data_Op.Op(defaultToOptions($4));
  };
  var assoc = Data_Newtype.unwrap();
  exports["options"] = options;
  exports["assoc"] = assoc;
  exports["opt"] = opt;
  exports["semigroupOptions"] = semigroupOptions;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Node.ReadLine"] = $PS["Node.ReadLine"] || {};
  var exports = $PS["Node.ReadLine"];
  var $foreign = $PS["Node.ReadLine"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Options = $PS["Data.Options"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect = $PS["Effect"];
  var Node_Process = $PS["Node.Process"];     
  var output = Data_Options.opt("output");
  var noCompletion = function (s) {
      return Control_Applicative.pure(Effect.applicativeEffect)({
          completions: [  ],
          matched: s
      });
  };                                                
  var createInterface = function (input) {
      return function (opts) {
          return $foreign.createInterfaceImpl(Data_Options.options(Data_Semigroup.append(Data_Options.semigroupOptions)(opts)(Data_Options.assoc(Data_Options.opt("input"))(input))));
      };
  };
  var completer = Data_Options.opt("completer");
  var createConsoleInterface = function (compl) {
      return createInterface(Node_Process.stdin)(Data_Semigroup.append(Data_Options.semigroupOptions)(Data_Options.assoc(output)(Node_Process.stdout))(Data_Options.assoc(completer)(compl)));
  };
  exports["createConsoleInterface"] = createConsoleInterface;
  exports["noCompletion"] = noCompletion;
  exports["close"] = $foreign.close;
  exports["question"] = $foreign.question;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Node.ReadLine.Aff"] = $PS["Node.ReadLine.Aff"] || {};
  var exports = $PS["Node.ReadLine.Aff"];
  var Data_Either = $PS["Data.Either"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Node_ReadLine = $PS["Node.ReadLine"];                
  var question = function (q) {
      return function ($$interface) {
          var go = function (handler) {
              return function __do() {
                  Node_ReadLine.question(q)(function ($0) {
                      return handler(Data_Either.Right.create($0));
                  })($$interface)();
                  return Effect_Aff.nonCanceler;
              };
          };
          return Effect_Aff.makeAff(go);
      };
  };
  exports["question"] = question;
})(PS);
(function(exports) {
  /* global Buffer */
  "use strict";

  exports.writeStringImpl = function (w) {
    return function (enc) {
      return function (s) {
        return function (done) {
          return function () {
            return w.write(s, enc, done);
          };
        };
      };
    };
  };
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Node.Stream"] = $PS["Node.Stream"] || {};
  var exports = $PS["Node.Stream"];
  var $foreign = $PS["Node.Stream"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var writeString = function (w) {
      return function (enc) {
          return $foreign.writeStringImpl(w)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  exports["writeString"] = writeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck.CUI.Util"] = $PS["Brainfuck.CUI.Util"] || {};
  var exports = $PS["Brainfuck.CUI.Util"];
  var Brainfuck_CUI_State = $PS["Brainfuck.CUI.State"];
  var Brainfuck_Error = $PS["Brainfuck.Error"];
  var Brainfuck_Interp = $PS["Brainfuck.Interp"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_Process = $PS["Node.Process"];
  var Node_ReadLine = $PS["Node.ReadLine"];
  var Node_ReadLine_Aff = $PS["Node.ReadLine.Aff"];
  var Node_Stream = $PS["Node.Stream"];                
  var questionAndReadChar = function (dictMonadAff) {
      return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Effect_Class.liftEffect(Brainfuck_Interp["$_MonadEffectInterp_10"](dictMonadAff.MonadEffect0()))(Node_ReadLine.createConsoleInterface(Node_ReadLine.noCompletion)))(function ($$interface) {
          return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Effect_Aff_Class.liftAff(Brainfuck_Interp["$_MonadAffInterp_11"](dictMonadAff))(Node_ReadLine_Aff.question("input> ")($$interface)))(function (s) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Effect_Class.liftEffect(Brainfuck_Interp["$_MonadEffectInterp_10"](dictMonadAff.MonadEffect0()))(Node_ReadLine.close($$interface)))(function () {
                  var v = Data_String_CodeUnits.toChar(Data_String_CodeUnits.take(1)(s));
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(Brainfuck_Interp["$_ApplicativeInterp_4"]((dictMonadAff.MonadEffect0()).Monad0()))(v.value0);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Monad_Error_Class.throwError(Brainfuck_Interp["$_MonadThrowErrorInterp_9"]((dictMonadAff.MonadEffect0()).Monad0()))(Brainfuck_Error.CharInputFailed.value);
                  };
                  throw new Error("Failed pattern match at Brainfuck.CUI.Util (line 79, column 3 - line 84, column 33): " + [ v.constructor.name ]);
              });
          });
      });
  };
  var print = function (dictMonadEffect) {
      return function (str) {
          return Data_Functor["void"](Brainfuck_Interp["$_FunctorInterp_2"]((((dictMonadEffect.Monad0()).Bind1()).Apply0()).Functor0()))(Effect_Class.liftEffect(Brainfuck_Interp["$_MonadEffectInterp_10"](dictMonadEffect))(Node_Stream.writeString(Node_Process.stdout)(Node_Encoding.UTF8.value)(str)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))));
      };
  };
  var up = function (dictMonadEffect) {
      return function (n) {
          return print(dictMonadEffect)("\x1b[" + (Data_Show.show(Data_Show.showInt)(n) + "F"));
      };
  };
  var newLineTimes = function (dictMonadEffect) {
      return function (n) {
          return print(dictMonadEffect)(Data_String_Common.joinWith("")(Data_Array.replicate(n)("\x0a")));
      };
  };
  var mostLeft = function (dictMonadEffect) {
      return print(dictMonadEffect)("\x1b[1G");
  };
  var highlight = function (s) {
      return "\x1b[7m" + (s + "\x1b[0m");
  };
  var down = function (dictMonadEffect) {
      return function (n) {
          return print(dictMonadEffect)("\x1b[" + (Data_Show.show(Data_Show.showInt)(n) + "E"));
      };
  };
  var move = function (dictMonadEffect) {
      return function (x) {
          return function (state) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"](dictMonadEffect.Monad0()))(Effect_Class.liftEffect(Brainfuck_Interp["$_MonadEffectInterp_10"](dictMonadEffect))(Effect_Ref.modify_(Brainfuck_CUI_State.modifyY(function (v) {
                  return v + x | 0;
              }))(state)))(function () {
                  var $14 = x > 0;
                  if ($14) {
                      return down(dictMonadEffect)(x);
                  };
                  var $15 = x < 0;
                  if ($15) {
                      return up(dictMonadEffect)(-x | 0);
                  };
                  return mostLeft(dictMonadEffect);
              });
          };
      };
  };
  var moveAt = function (dictMonadEffect) {
      return function (y) {
          return function (state) {
              return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"](dictMonadEffect.Monad0()))(Effect_Class.liftEffect(Brainfuck_Interp["$_MonadEffectInterp_10"](dictMonadEffect))(Data_Functor.map(Effect.functorEffect)(Brainfuck_CUI_State.dist(y))(Effect_Ref.read(state))))(function (dist) {
                  return move(dictMonadEffect)(dist)(state);
              });
          };
      };
  };
  var clearLine = function (dictMonadEffect) {
      return print(dictMonadEffect)("\x1b[2K");
  };
  var printAt = function (dictMonadEffect) {
      return function (y) {
          return function (state) {
              return function (str) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"](dictMonadEffect.Monad0()))(moveAt(dictMonadEffect)(y)(state))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"](dictMonadEffect.Monad0()))(clearLine(dictMonadEffect))(function () {
                          return print(dictMonadEffect)(str);
                      });
                  });
              };
          };
      };
  };
  exports["printAt"] = printAt;
  exports["moveAt"] = moveAt;
  exports["up"] = up;
  exports["clearLine"] = clearLine;
  exports["newLineTimes"] = newLineTimes;
  exports["highlight"] = highlight;
  exports["questionAndReadChar"] = questionAndReadChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Brainfuck.CUI"] = $PS["Brainfuck.CUI"] || {};
  var exports = $PS["Brainfuck.CUI"];
  var Brainfuck_CUI_State = $PS["Brainfuck.CUI.State"];
  var Brainfuck_CUI_Util = $PS["Brainfuck.CUI.Util"];
  var Brainfuck_Command = $PS["Brainfuck.Command"];
  var Brainfuck_Env = $PS["Brainfuck.Env"];
  var Brainfuck_Interp = $PS["Brainfuck.Interp"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var mapWithASpecialIndex = function (j) {
      return function (fThen) {
          return function (fElse) {
              return Data_Array.mapWithIndex(function (i) {
                  return function (x) {
                      var $5 = i === j;
                      if ($5) {
                          return fThen(x);
                      };
                      return fElse(x);
                  };
              });
          };
      };
  };
  var showMemory = function (dptr) {
      return function (memory) {
          return Data_String_Common.joinWith(" ")(mapWithASpecialIndex(dptr)((function () {
              var $12 = Data_Show.show(Data_Show.showInt);
              return function ($13) {
                  return Brainfuck_CUI_Util.highlight($12($13));
              };
          })())(Data_Show.show(Data_Show.showInt))(memory));
      };
  };
  var showProgram = function (iptr) {
      return function (v) {
          return Data_String_Common.joinWith("")(mapWithASpecialIndex(iptr)((function () {
              var $14 = Data_Show.show(Brainfuck_Command["$_ShowCommand_2"]);
              return function ($15) {
                  return Brainfuck_CUI_Util.highlight($14($15));
              };
          })())(Data_Show.show(Brainfuck_Command["$_ShowCommand_2"]))(v));
      };
  };
  var cuiStream = function (dictMonadAff) {
      return function (cuiState) {
          var output = function (c) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Control_Applicative.when(Brainfuck_Interp["$_ApplicativeInterp_4"]((dictMonadAff.MonadEffect0()).Monad0()))(c === "\x0a")(Effect_Class.liftEffect(Brainfuck_Interp["$_MonadEffectInterp_10"](dictMonadAff.MonadEffect0()))(Effect_Ref.modify_(Brainfuck_CUI_State.incOntputLines)(cuiState))))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Effect_Class.liftEffect(Brainfuck_Interp["$_MonadEffectInterp_10"](dictMonadAff.MonadEffect0()))(Effect_Ref.modify_(Brainfuck_CUI_State.appendOutput(c))(cuiState)))(function () {
                      return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Effect_Class.liftEffect(Brainfuck_Interp["$_MonadEffectInterp_10"](dictMonadAff.MonadEffect0()))(Effect_Ref.read(cuiState)))(function (st) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Brainfuck_CUI_Util.printAt(dictMonadAff.MonadEffect0())(2)(cuiState)(Brainfuck_CUI_State.getOutput(st)))(function () {
                              var lines = Brainfuck_CUI_State.getOutputLines(st);
                              return Control_Applicative.when(Brainfuck_Interp["$_ApplicativeInterp_4"]((dictMonadAff.MonadEffect0()).Monad0()))(lines !== 0)(Brainfuck_CUI_Util.up(dictMonadAff.MonadEffect0())(lines));
                          });
                      });
                  });
              });
          };
          var input = Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Brainfuck_CUI_Util.moveAt(dictMonadAff.MonadEffect0())(2)(cuiState))(function () {
              return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Brainfuck_CUI_Util.questionAndReadChar(dictMonadAff))(function (s) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Brainfuck_CUI_Util.up(dictMonadAff.MonadEffect0())(1))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Brainfuck_CUI_Util.clearLine(dictMonadAff.MonadEffect0()))(function () {
                          return Control_Applicative.pure(Brainfuck_Interp["$_ApplicativeInterp_4"]((dictMonadAff.MonadEffect0()).Monad0()))(s);
                      });
                  });
              });
          });
          return {
              input: input,
              output: output
          };
      };
  };
  var cuiLog = function (dictMonadAff) {
      return function (cuiState) {
          var onState = function (v) {
              return Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Data_Functor.map(Brainfuck_Interp["$_FunctorInterp_2"](((((dictMonadAff.MonadEffect0()).Monad0()).Bind1()).Apply0()).Functor0()))(Brainfuck_Env.getProgram)(Control_Monad_Reader_Class.ask(Brainfuck_Interp["$_MonadAskEnvInterp_8"]((dictMonadAff.MonadEffect0()).Monad0()))))(function (program) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Brainfuck_CUI_Util.printAt(dictMonadAff.MonadEffect0())(0)(cuiState)(showProgram(v.iptr)(program)))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Brainfuck_CUI_Util.printAt(dictMonadAff.MonadEffect0())(1)(cuiState)(showMemory(v.dptr)(v.memory)))(function () {
                          return Effect_Aff_Class.liftAff(Brainfuck_Interp["$_MonadAffInterp_11"](dictMonadAff))(Effect_Aff.delay(100.0));
                      });
                  });
              });
          };
          var onStart = Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Brainfuck_CUI_Util.newLineTimes(dictMonadAff.MonadEffect0())(2))(function () {
              return Brainfuck_CUI_Util.up(dictMonadAff.MonadEffect0())(2);
          });
          var onEnd = Control_Bind.bind(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Effect_Class.liftEffect(Brainfuck_Interp["$_MonadEffectInterp_10"](dictMonadAff.MonadEffect0()))(Effect_Ref.read(cuiState)))(function (st) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Brainfuck_Interp["$_BindInterp_5"]((dictMonadAff.MonadEffect0()).Monad0()))(Brainfuck_CUI_Util.moveAt(dictMonadAff.MonadEffect0())(3 + Brainfuck_CUI_State.getOutputLines(st) | 0)(cuiState))(function () {
                  return Brainfuck_CUI_Util.newLineTimes(dictMonadAff.MonadEffect0())(2);
              });
          });
          return {
              onStart: onStart,
              onState: onState,
              onCmd: function (v) {
                  return Control_Applicative.pure(Brainfuck_Interp["$_ApplicativeInterp_4"]((dictMonadAff.MonadEffect0()).Monad0()))(Data_Unit.unit);
              },
              onEnd: onEnd
          };
      };
  };
  exports["cuiStream"] = cuiStream;
  exports["cuiLog"] = cuiLog;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.2
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Brainfuck = $PS["Brainfuck"];
  var Brainfuck_CUI = $PS["Brainfuck.CUI"];
  var Brainfuck_CUI_State = $PS["Brainfuck.CUI.State"];
  var Brainfuck_Program = $PS["Brainfuck.Program"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_Class = $PS["Effect.Aff.Class"];
  var Effect_Class = $PS["Effect.Class"];
  var Node_ReadLine = $PS["Node.ReadLine"];
  var Node_ReadLine_Aff = $PS["Node.ReadLine.Aff"];                
  var inputProgram = Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_ReadLine.createConsoleInterface(Node_ReadLine.noCompletion)))(function ($$interface) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Node_ReadLine_Aff.question("program> ")($$interface))(function (s) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_ReadLine.close($$interface)))(function () {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Brainfuck_Program.fromString(s));
          });
      });
  });
  var main = function __do() {
      var ref = Brainfuck_CUI_State.init();
      return Effect_Aff.launchAff_(Control_Bind.bind(Effect_Aff.bindAff)(inputProgram)(function (program) {
          return Brainfuck.run(Effect_Aff.monadAff)(Brainfuck_CUI.cuiStream(Effect_Aff_Class.monadAffAff)(ref))(Brainfuck_CUI.cuiLog(Effect_Aff_Class.monadAffAff)(ref))(program);
      }))();
  };
  exports["main"] = main;
  exports["inputProgram"] = inputProgram;
})(PS);
PS["Main"].main();